
#user  nobody;
worker_processes  1;

#error_log  logs/error.log;
#error_log  logs/error.log  notice;
#error_log  logs/error.log  info;

#pid        logs/nginx.pid;


events {
    worker_connections  1024;
}


http {
    include       mime.types;
    default_type  application/octet-stream;
	
	client_max_body_size 50M;  # 必须大于等于location中的限制
    client_body_buffer_size 512k;
    client_body_temp_path /dev/shm/client_body_temp 1 2;

    #log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
    #                  '$status $body_bytes_sent "$http_referer" '
    #                  '"$http_user_agent" "$http_x_forwarded_for"';

    #access_log  logs/access.log  main;

    sendfile        on;
    #tcp_nopush     on;

    #keepalive_timeout  0;
    keepalive_timeout  65;

    #gzip  on;

    server {
        listen       80;
        server_name  my_nginx;

        #charset koi8-r;

        #access_log  logs/host.access.log  main;
	root /var/www; 

        location / {
            index  index.html index.htm;
        }

	location /v {
	    alias  /var/www/v;
	    autoindex on;
	    autoindex_format xml;
		autoindex_exact_size off;
        autoindex_localtime off;
	    xslt_stylesheet /etc/nginx/autoindex_evilvir.xslt;
	    charset utf-8,gbk;
	}
	
	location /upload {
		upload_pass   @upload_endpoint;
		upload_store  /var/www/mp3;
		upload_max_file_size 50M;
		upload_buffer_size 10M;       # 新增缓冲区设置
        upload_max_part_header_len 8k; # 包头大小限制
		upload_store_access user:rw group:rw all:r;

		# 使用正确的变量名设置表单字段
		upload_set_form_field $upload_field_name.name "$upload_file_name";
		upload_set_form_field $upload_field_name.content_type "$upload_content_type";  # 直接使用内置变量
		upload_pass_form_field "^submit$|^description$";
		
		upload_cleanup 400-599;  # 清理错误的上传临时文件
	}

	location @upload_endpoint {
		return 200 "Upload Success";
	}

        
	#error_page  404              /404.html;

        # redirect server error pages to the static page /50x.html
        #
        error_page   500 502 503 504  /50x.html;
        location = /50x.html {
            root   html;
        }

        # proxy the PHP scripts to Apache listening on 127.0.0.1:80
        #
        #location ~ \.php$ {
        #    proxy_pass   http://127.0.0.1;
        #}

        # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
        #
        #location ~ \.php$ {
        #    root           html;
        #    fastcgi_pass   127.0.0.1:9000;
        #    fastcgi_index  index.php;
        #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
        #    include        fastcgi_params;
        #}

        # deny access to .htaccess files, if Apache's document root
        # concurs with nginx's one
        #
        #location ~ /\.ht {
        #    deny  all;
        #}
    }


    # another virtual host using mix of IP-, name-, and port-based configuration
    #
    #server {
    #    listen       8000;
    #    listen       somename:8080;
    #    server_name  somename  alias  another.alias;

    #    location / {
    #        root   html;
    #        index  index.html index.htm;
    #    }
    #}


    # HTTPS server
    #
    #server {
    #    listen       443 ssl;
    #    server_name  localhost;

    #    ssl_certificate      cert.pem;
    #    ssl_certificate_key  cert.key;

    #    ssl_session_cache    shared:SSL:1m;
    #    ssl_session_timeout  5m;

    #    ssl_ciphers  HIGH:!aNULL:!MD5;
    #    ssl_prefer_server_ciphers  on;

    #    location / {
    #        root   html;
    #        index  index.html index.htm;
    #    }
    #}

}
